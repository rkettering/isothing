{
	id: "iso_object",
	is_strict: true,


	properties: {
		pos:  { type: "{x: decimal, y: decimal, z: decimal }",  default: {x:0, y:0, z:0}  },
	

		pos_after_rot_XY: "def({x: decimal, y: decimal, z: decimal } prior, decimal angle) -> {x: decimal, y: decimal, z: decimal }
				{
					x: (cos(angle) * prior.x) - (sin(angle) * prior.y),
					y: ((sin(angle)*prior.x) + (cos(angle)*prior.y)),
					z: prior.z
				}",
			
		pos_after_rot_YZ: "def({x: decimal, y: decimal, z: decimal } prior, decimal angle) -> {x: decimal, y: decimal, z: decimal }
				{
					x: (cos(angle) * prior.x) + (sin(angle) * prior.z),
					y: prior.y,
					z: -(sin(angle) * prior.x) + (cos(angle) * prior.z)
				}",
			
		pos_after_rot_XZ: "def({x: decimal, y: decimal, z: decimal } prior, decimal angle) -> {x: decimal, y: decimal, z: decimal }
				{
					x: prior.x,
					y: ((cos(angle) * prior.y) - (sin(angle) * prior.z)),
					z: (sin(angle) * prior.y) + (cos(angle) * prior.z)
				}",




		camera_rot:  "(obj iso_camera <- find_or_die(level.chars, value is obj iso_camera)).camera_rot",
	
	
	
		get_pos_for_draw:  "def( {x: decimal, y: decimal, z: decimal } prior, decimal xy_angle, decimal yz_angle, decimal xz_angle ) -> {x: decimal, y: decimal, z: decimal }
							pos_after_rot_XY(
								pos_after_rot_YZ(
									pos_after_rot_XY(
										pos,
										xy_angle
									),
									yz_angle
								),
								xz_angle
							)",
						
		draw: "	[
					set(x, draw_pos.x),
					set(y, draw_pos.y),
					set(zsub_order, int(draw_pos.z))
				] where draw_pos = get_pos_for_draw(pos, camera_rot.xy, camera_rot.yz, camera_rot.xz)",
	},


	on_create: "",


	
	

	animation: [
		{
			image: "tile.png",
			id: "stand",
			rect: [0,0,63,63],
			frames: 1,
			duration: 10,
		},
	],
}